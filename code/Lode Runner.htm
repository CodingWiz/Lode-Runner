<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">
  <head>
  
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Lode Runner par Mohamed H. Guelleh & Andrew Chedid</title>
    <link rel="stylesheet" type="text/css" href="" />

    <script type="text/javascript">
      // variables constantes
      const intNiveau_1 = 1, intNiveau_2 = 2, intNiveau_3 = 3;
      const intNum_Cell_X = 28, intNum_Cell_Y = 17;

      const intPixelWidthOr = 35, intPixelHeightOr = 42;
      const intPixelWidthRunner = 50, intPixelHeightRunner = 60;
      const intPixelWidthGarde = 50, intPixelHeightGarde = 66;
      const intPixelWidthEscalier = 50, intPixelHeightEscalier = 66;
      const intPixelWidthCorde = 50, intPixelHeightCorde = 66;
      const intPixelWidthBrique = 50, intPixelHeightBrique = 65;

      const intVitesseRunner = 5, intVitesseGarde = 5;

      /* legende de la carte du niveau : 
          $ = or
          @ = Joueur
          ! = garde
          H = escalier
          | = escalier final
          - = corde
          # = passerelle de brique
          ~ = sol
            = vide
      */
     // array constante globale qui contient les cartes des differents niveau
      const arrNiveau_Map = [ 
        "                  |         " + // carte du niveau 1
        "    $             |         " +
        "1#####2H1#####2   |         " +
        "       H----------|    $    " +
        "       H    12H   1#####2H12" +
        "       H    12H          H  " +
        "     ! H    12H       $! H  " +
        "12H1###2    1######2H1#####2" +
        "  H                 H       " +
        "  H           !     H       " +
        "1#######2H1########2H       " +
        "         H          H       " +
        "       $ H----------H   $   " +
        "    H1####2         1#####2H" +
        "    H         @  $         H" +
        "1##########################2" + 
        "~~~~~~~~~~~~~~~~~~~~~~~~~~~~" 
      ];
      // constantes globales qui contiennent les photos/sprites
      const srcSprites = "../assets/sprites/";
      const strSprite_Or = srcSprites + "gold.png", 
            strSprite_Joueur = srcSprites + "runner.png", 
            strSprite_Garde = srcSprites + "guard1.png", 
            strSprite_Escalier = srcSprites + "ladder.png", 
            strSprite_Corde = srcSprites + "rope.png", 
            strSprite_Brique = srcSprites + "brick.png", 
            strSprite_Sol = srcSprites + "block.png",
            strSprite_Vide = srcSprites + "empty.png";

      // variables globales
      var objCanvas = null, 
          objC2D = null;

      // stage qui contient tous les enfants a dessiner et a mettre dans le jeu
      var objStage = null; 

      var objJoueur = null, // lode runner que le Joueur controle
          objMap = null, // representation des cellules dans un tableau array en 2d
          intNiveau_Courant = 0, // niveau courant du joueur
          intOr_Count = 0, // compte le nombre d'or qu'il y a dans le jeu
          intGarde_Count = 0; // compte le nombre de garde qu'il y a dans le jeu

      var intScore = 0;
      var objDateInitiale = new Date().getTime();
      var intVies = 5;

      var objBrickCollision = null;


      // remettre les variables globales aux valeurs par defaut
      function remettreVariables() {
        // redefini la fonction stage et le met dans la variable objStage
        objStage = object_Stage({ 
          name: "Main stage",
          toString: function() {
            return "[Stage  (name = "+  this.name +")]";
          }
        });

        // redefini la fonction joueur et le met dans la variable objJoueur
        objJoueur = object_Joueur({});

        objBrickCollision = object_BrickCollision({});

        objMap = [[]];

        // niveau 1 par defaut
        intNiveau_Courant = intNiveau_1; 

        intOr_Count = 0;
        intGarde_Count = 0;
      }

      // construire le niveau
      function construireNiveau(niveau) {
        // retourne le charactere aux positions (x,y) du niveau
        var intNiveau_Charactere_Count = 0; 

        for (var x = 0; x < intNum_Cell_X; x++) {
          objMap[x] = []; 

          for (var y = 0; y < intNum_Cell_Y; y++) 
            objMap[x][y] = {};
        }

        var objBrick;

        // parcours les cellules horizontales
        for (var y = 0; y < intNum_Cell_Y; y++) { 
          // https://stackoverflow.com/questions/966225/how-can-i-create-a-two-dimensional-array-in-javascript
          // genere une erreure si on ne mets pas ca --> you have to set myArray[1]=[]; before assigning myArray[1][0]=5;
          //objMap[x] = []; 

          // parcours les cellues verticales
          for (var x = 0; x < intNum_Cell_X; x++) { 
          // cree un nouveau objet aux coordonnees (x,y)
            //objMap[x][y] = {}; 

            // retourne le charactere aux positions (x,y) du niveau
            var strNiveau_Charactere = niveau.charAt(intNiveau_Charactere_Count++);
            
            var objImage = object_Images({
            });
            objImage.strCharactere = strNiveau_Charactere;
            objImage.intX = x;
            objImage.intY = y;

            objImage.visible = true;
            objImage.firstLoad = true;

            //objMap.strCharactere = strNiveau_Charactere;
            objMap[x][y].strCharactere = strNiveau_Charactere;

            switch(strNiveau_Charactere) {
              /* legende de la carte du niveau : 
                  $ = or
                  @ = Joueur
                  ! = garde
                  H = escalier
                  | = escalier final
                  - = corde
                  # = passerelle de brique
                  ~ = sol
                    = vide
              */
              case "$": 
                intOr_Count++; 
                
                objImage.strSrc = strSprite_Or;
                //objImage.img = initImage(strSprite_Or, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X) + (intPixelWidthOr/3);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y) + (intPixelHeightOr/2);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthOr
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightOr;

                break;
              case "@": 
                objImage.strSrc = objJoueur.strSrc = strSprite_Joueur;
                //objImage.img = objJoueur.img = initImage(strSprite_Joueur, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthRunner;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightRunner;

                objJoueur.objImage = objImage;
                objJoueur.initTab_Images_Runner();
                //objJoueur.initPosition();

                break;
              case "!":
                intGarde_Count++; 

                objImage.strSrc = strSprite_Garde;
                //objImage.img = initImage(strSprite_Garde, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthGarde;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightGarde;

                break;
              case "H": 
                objImage.strSrc = strSprite_Escalier;
                //objImage.img = initImage(strSprite_Escalier, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthEscalier;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightEscalier;

                break;
              case "|": 
                objImage.strSrc = strSprite_Escalier;
                //objImage.img = initImage(strSprite_Escalier, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthEscalier;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightEscalier;

                objImage.visible = false;

                break;
              case "-": 
                objImage.strSrc = strSprite_Corde;
                //objImage.img = initImage(strSprite_Corde, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthCorde;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightCorde;

                break;
              case "#":
                objImage.strSrc = strSprite_Brique;
                //objImage.img = initImage(strSprite_Brique, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthBrique;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightBrique;

                break;

              case "1":
                objBrick = object_brick({});

                objImage.strCharactere = "#";
                objImage.strSrc = strSprite_Brique;
                //objImage.img = initImage(strSprite_Brique, x, y);.

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthBrique;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightBrique;

                objBrick.pixelX1 = objImage.getPixelX1();
                objBrick.pixelY1 = objImage.getPixelY1();

                //objBrickCollision.children.push(objBrick);

                break;
              case "2":
                objImage.strCharactere = "#";
                objImage.strSrc = strSprite_Brique;
                //objImage.img = initImage(strSprite_Brique, x, y);

                objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
                objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);

                objImage.pixelX2 = objImage.getPixelX1() + intPixelWidthBrique;
                objImage.pixelY2 = objImage.getPixelY1() + intPixelHeightBrique;

                objBrick.pixelX2 = objImage.getPixelX2();
                objBrick.pixelY2 = objImage.getPixelY2();

                objBrickCollision.children.push(objBrick);

                break;
              case "~": 
                objImage.strSrc = strSprite_Sol;
                //objImage.img = initImage(strSprite_Sol, x, y);

                break;
              case " ": 
                objImage.strSrc = strSprite_Vide;
                //objImage.img = initImage(strSprite_Vide, x, y);

                break;
            }

            objStage.addChild(objImage);
          }
        }

        /*console.log(objStage.children);
        console.log(objStage.getNumChildren());
        console.log(objStage.getChildIndex("@"));
        console.log(objStage.getChildAt(406));

        objStage.removeChild("@");

        console.log(objStage.children);
        console.log(objStage.getNumChildren());
        console.log(objStage.getChildIndex("@"));
        console.log(objStage.getChildAt(406));*/

        
      }

      /* legende de la carte du niveau : 
          $ = or
          @ = Joueur
          ! = garde
          H = escalier
          | = escalier final
          - = corde
          # = passerelle de brique
          ~ = sol
            = vide
      */
      // demarre le jeu
      function initLodeRunner() { 
        // variables canvas 
        objCanvas = document.getElementById('monCanvas');
        objC2D = objCanvas.getContext('2d');

        //blackCanvas();
        objCanvas.focus();
        
        remettreVariables();

        construireNiveau(arrNiveau_Map[intNiveau_Courant-1]);  
        
        objStage.draw();

        /*objMap.forEach(strCharactere => {
          console.log(strCharactere);
        });*/

        //console.log(objMap[17][14].strCharactere);

        //objStage.getConsoleImageIndexAt("H");
        //console.log(objStage.getChildFromCharacterePositionAt("$", 17, 14));
        //console.log(objStage.collision(objJoueur.objImage, objStage.getChildFromCharacterePositionAt("$", 17, 14)));

        console.log(objBrickCollision.children[objBrickCollision.children.length-1].strCharactere);

        animer();
      }

      function blackCanvas() {
        objC2D.fillStyle = "black";
        objC2D.fillRect(0, 0, objCanvas.width, objCanvas.height);
      }

      var objCycleAnimation = null;
      function animer() {
        // Requête pour le prochain cycle
        objCycleAnimation = requestAnimationFrame(animer);
	
        // Le cycle d'animation
        objStage.draw();
        //objStage.getConsoleImageIndexAt("@");

        objStage.getChildCharactereAt("$").forEach(objImageGold => {
          if (objStage.collision(objJoueur.objImage, objImageGold)) {
            //objImage.visible = false; // pour les gardes
            objStage.removeChild(objImageGold); // pour lode runner
            intOr_Count--;
            intScore += 250;
          }
        });

        //console.log(intOr_Count);

        if (intOr_Count == 0) {
          /*objStage.children.forEach(objImage => {
            if (objImage.getStrCharactere() == "|") {
              objImage.visible = true;
            }
          });*/
          objStage.getChildCharactereAt("|").forEach(objImage => {
            objImage.visible = true;
          }); 
        }

        /*console.log(objStage.getCharacterePositionAt(objJoueur.objImage.getX()-1, objJoueur.objImage.getY())  + "x gauche, " +
                    objStage.getCharacterePositionAt(objJoueur.objImage.getX()+1, objJoueur.objImage.getY()) + "x droite, " + 
                    objJoueur.objImage.getX() + "x, " + objJoueur.objImage.getY() + "y");*/

        //console.log(objStage.getCharacterePositionAt(objJoueur.objImage.getX(), objJoueur.objImage.getY()));
        //console.log(objJoueur.objImage.getX() + "x, " + objJoueur.objImage.getY() + "y");
        //console.log(objMap[objJoueur.objImage.getX()][objJoueur.objImage.getY()].strCharactere);

        //objJoueur.fall();

        objStage.showHitBoxes(objJoueur.objImage, "white");
        /*objStage.getChildCharactereAt("H").forEach(objImage => {
          objStage.showHitBoxes(objImage, "yellow");
        });
        objStage.getChildCharactereAt("#").forEach(objImage => {
          objStage.showHitBoxes(objImage, "red");
        });*/
        objBrickCollision.children.forEach(objBrick => {
          objStage.showHitBoxes(objBrick, "red");
          //console.log(objBrick.getPixelX1() + "x1, " + objBrick.getPixelY1() + "y1, " + objBrick.getPixelX2() + "x2, " + objBrick.getPixelY2() + "y2");
        });

        /*console.log("\"" + objStage.getCharacterePositionAt(objJoueur.objImage.getX()+1, objJoueur.objImage.getY()) + "\"" + " : " +
                    objJoueur.objImage.getX() + "x, " + objJoueur.objImage.getY() + "y");*/
      }
      function effacerDessin() {
	      objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height); 
      }
      function mettreAJourAnimation() {
		    // A programmer
		     
      }
      function arreterAnimation() {
        if (objCycleAnimation != null)
            cancelAnimationFrame(objCycleAnimation);	
        objCycleAnimation = null;
      }

      // initialise les images
      // https://stackoverflow.com/questions/41463192/canvas-drawimage-loop-issue
      /*function initImage(imgSrc, x, y) {
        var image = new Image();
        
        image.src = imgSrc;

        image.onload = function(){
          objC2D.drawImage(image, x*(objCanvas.width/intNum_Cell_X), y*(objCanvas.height/intNum_Cell_Y), 52, 64);
        }

        return image;
      }*/

      // initialise les images pour les animations
      /*function initImage(){         
         Image_Block.src = "../assets/sprites/block.png";
         
         Image_Brick.src = "../assets/sprites/brick.png";
         
         Image_Empty.src = "../assets/sprites/empty.png";
         
         Image_Gold.src = "../assets/sprites/gold.png";
         
         Image_Ground.src = "../assets/sprites/ground.png";
         
          Image_Guard.src = "../assets/sprites/guard.png";
          
          for (var i=0;i<22;i++){
              tab_Image_Guard[i]=new Array(2);
              tab_Image_Guard[i][0] = 0;
              tab_Image_Guard[i][1] = 0;
          }
          
            for (var i=0;i<11;i++){
              tab_Image_Guard[i][0] = 40*i;
              tab_Image_Guard[i][1] = 0;
            }
            for (var i=11;i<22;i++){
              tab_Image_Guard[i][0] = 40*(i-11);
              tab_Image_Guard[i][1] = 85;
            }
          
          Image_Hladder.src="../assets/sprites/hladder.png";
          
          Image_Hole.src="../assets/sprites/hole.png";
          
          
            for (var i=0;i<9;i++){
              tab_Image_Hole[i]=new Array(2);
              
              tab_Image_Hole[i][0] = 40*i;
              tab_Image_Hole[i][1] = 0;
            }
            for (var i=9;i<18;i++){
              tab_Image_Hole[i]=new Array(2);
              tab_Image_Hole[i][0] = 40*(i-9);
              tab_Image_Hole[i][1] = 85;
            }
           
          Image_Ladder.src="../assets/sprites/ladder.png";
          
          Image_Over.src="../assets/sprites/over.png";
          
          Image_Redhat.src="../assets/sprites/redhat.png";
          
            for (var i=0;i<11;i++){
              tab_Image_Redhat[i]=new Array(2);
              tab_Image_Redhat[i][0] = 40*i;
              tab_Image_Redhat[i][1] = 0;
            }
            for (var i=11;i<22;i++){
              tab_Image_Redhat[i]=new Array(2);
             tab_Image_Redhat[i][0] = 40*(i-11);
             tab_Image_Redhat[i][1] = 85;
            }
            
          Image_Rope.src="../assets/sprites/rope.png";
            
          Image_Runner.src="../assets/sprites/runner.png";
            
            for (var i=0;i<9;i++){
              tab_Image_Runner[i]=new Array(2);
              tab_Image_Runner[i][0] = 40*i;
              tab_Image_Runner[i][1] = 0;
            }
            for (var i=9;i<18;i++){
              tab_Image_Runner[i]=new Array(2);
              tab_Image_Runner[i][0] = 40*(i-9);
              tab_Image_Runner[i][1] = 85;
            }
          
          Image_Text.src="../assets/sprites/text.png";
          
          for(var j=0;j<6;j++){
            for (var i=10*j;i<10*(j+1);i++){
              tab_Image_Text[i]=new Array(2);
              tab_Image_Text[i][0] = 40*(i-(j*10));
              tab_Image_Text[i][1] = 44*j;
            }
          }
          
          Image_Trap.src="../assets/sprites/trap.png";
          
          Image_Runner.onload=function(){
            objC2D.drawImage(Image_Runner,0,0);
          }
      }*/
      /*function dessiner(){
        //objC2D.fillStyle='black';
        //objC2D.fillRect(0,0,objCanvas.width,objCanvas.height);
        objC2D.drawImage(Image_Runner, tab_Image_Runner[intOptions][0],tab_Image_Runner[intOptions][1], 40,85, intPositionX1,intPositionY1, 40,85);
      }*/

      // fonction stage qui initialise l'objet stage et 
      // elle est redefinie par celui-ci a chaque fois qu'on appelle la fonction remettreVariable()
      function object_Stage() {
        // objet qui est retourne par la fonction
        var object_Stage = {};

        object_Stage.name = null;
        object_Stage.toString = null;

        object_Stage.canvas = objCanvas;

        object_Stage.children = [];

        //object_Stage.arrGold = [];
        
        object_Stage.getChildAt = function(index) {
          return this.children[index];
        };
        object_Stage.getChildByName = function(name) {
          var kids = this.children;
          for (var i=0,l=kids.length;i<l;i++) {
            if(kids[i].name == name) { return kids[i]; }
          }
          return null;
        };
        object_Stage.getChildIndex = function(child) {
          return this.indexOf(this.children, child);
        };
        object_Stage.getNumChildren = function () {
          return this.children.length;
        };

        object_Stage.addChild = function(child) {
          if (child == null) { return child; }
          var l = arguments.length;
          if (l > 1) {
            for (var i=0; i<l; i++) { this.addChild(arguments[i]); }
            return arguments[l-1];
          }
          // Note: a lot of duplication with addChildAt, but push is WAY faster than splice.
          var par=child.parent, silent = par === this;
          par&&par._removeChildAt(this.indexOf(par.children, child), silent);
          child.parent = this;
          this.children.push(child);
          //if (!silent) { child.dispatchEvent("added"); }
          return child;
        };
        object_Stage.addChildAt = function(child, index) {
          var l = arguments.length;

          // can't use the same name as the index param or it replaces arguments[1]
          var indx = arguments[l-1]; 

          if (indx < 0 || indx > this.children.length) { return arguments[l-2]; }
          if (l > 2) {
            for (var i=0; i<l-1; i++) { this.addChildAt(arguments[i], indx+i); }
            return arguments[l-2];
          }
          var par=child.parent, silent = par === this;
          par&&par._removeChildAt(this.indexOf(par.children, child), silent);
          child.parent = this;
          this.children.splice(index, 0, child);
          //if (!silent) { child.dispatchEvent("added"); }
          return child;
        };

        object_Stage._removeChildAt = function(index, silent) {
          if (index < 0 || index > this.children.length-1) { return false; }
          var child = this.children[index];
          if (child) { child.parent = null; }
          this.children.splice(index, 1);
          //if (!silent) { child.dispatchEvent("removed"); }
          return true;
        };
        object_Stage.removeChild = function(child) {
          var l = arguments.length;
          if (l > 1) {
            var good = true;
            for (var i=0; i<l; i++) { good = good && this.removeChild(arguments[i]); }
            return good;
          }
          return this._removeChildAt(this.indexOf(this.children, child));
        };
        object_Stage.removeChildAt = function(index) {
          var l = arguments.length;
          if (l > 1) {
            var a = [];
            for (var i=0; i<l; i++) { a[i] = arguments[i]; }
            a.sort(function(a, b) { return b-a; });
            var good = true;
            for (var i=0; i<l; i++) { good = good && this._removeChildAt(a[i]); }
            return good;
          }
          return this._removeChildAt(index);
        };
        object_Stage.removeAllChildren = function() {
          var kids = this.children;
          while (kids.length) { this._removeChildAt(0); }
        };

        // ecrit sur la console les coordonnees de l'image
        object_Stage.getConsoleImageIndexAt = function(strCharactere) {
          this.children.forEach(objImage => {
            if (objImage.getStrCharactere() === strCharactere) {
              console.log(objImage.toString());
            }
          });
        };

        /*object_Stage.getCharactereAt = function(x, y) {
          this.children.forEach(objImage => {
            if (objImage.getX() == x && objImage.getY() == y) {
              console.log(objImage.getStrCharactere());
            }
          });
        };*/

        object_Stage.setVisibleCharactere = function(strCharactere, blnVisible) {
          this.children.forEach(objImage => {
            if (objImage.getStrCharactere() === strCharactere) {
              objImage.visible = blnVisible;
            }
          });
        };
        
        object_Stage.removeImageCharactereAt = function(strCharactere, x, y) {
          var blnTrouve = false,
              intCount = 0,
              intX = x,
              intY = y;

          this.children.forEach(objImage => {
            if (objImage.getStrCharactere() === strCharactere && 
                objImage.getX() == intX && 
                objImage.getY() == intY) {
              blnTrouve = true;
              intCount++;

              //this.removeChild(objImage);

              objImage.visible = false;
            }
          });

          if (blnTrouve) {
            console.log("L'image \"" + strCharactere + "\" a ete enlevee " + 
            intCount + "nb de fois aux coordonnees (" + intX + "x, " + intY + "y)");
          }
          else {
            console.log("L'image \"" + strCharactere + "\" n'a pas ete trouvee aux coordonnees (" + 
            intX + "x, " + intY + "y)");
          }
        };
        object_Stage.removeAllImageCharactere = function(strCharactere) {
          var blnTrouve = false,
              intCount = 0;

          this.children.forEach(objImage => {
            if (objImage.getStrCharactere() === strCharactere) {
              blnTrouve = true;
              intCount++;

              //this.removeChild(objImage);

              objImage.visible = false;
            }
          });

          if (blnTrouve) {
            console.log("L'image \"" + strCharactere + "\" a ete enlevee " + 
            intCount + "nb de fois");
          }
          else {
            console.log("L'image \"" + strCharactere + "\" n'a pas ete trouvee");
          }
        };

        object_Stage.sortChildren = function(sortFunction) {
          this.children.sort(sortFunction);
        };

        /*clone: function(recursive) {
          var o = this._cloneProps(new Container());
          if (recursive) { this._cloneChildren(o); }
          return o;
        },*/

        /*object_Stage.isVisible = function() {
          var hasContent = this.cacheCanvas || this.children.length;
          return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
        };
        object_Stage.draw = function(ctx, ignoreCache) {
          if (this.DisplayObject_draw(ctx, ignoreCache)) { 
            return true; 
          }
          
          // this ensures we don't have issues with display list changes that occur during a draw:
          var list = this.children.slice();
          for (var i=0,l=list.length; i<l; i++) {
            var child = list[i];
            if (!child.isVisible()) { 
              continue; 
            }
            
            // draw the child:
            ctx.save();
            //child.updateContext(ctx);
            child.draw(ctx);
            ctx.restore();
          }
          return true;
        };

        object_Stage.clear = function() {
          if (!this.canvas) { 
            return; 
          }
          var ctx = this.canvas.getContext("2d");
          //ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.fillStyle = "white";
          ctx.fillRect(0, 0, this.canvas.width+1, this.canvas.height+1);
        };*/

        object_Stage.indexOf = function (array, searchElement){          
          for (var i = 0, l=array.length; i < l; i++) {
            if (searchElement === array[i]) {
              return i;
            }
          }

          return -1;
        };

        object_Stage.getChildCharactereAt = function(strCharactere) {
          if (strCharactere == "$" || strCharactere == "|" || strCharactere == "H" || strCharactere == "-" || strCharactere == "#" || strCharactere == "!") {
            var arrContainer = [];

            this.children.forEach(objImage => {
              if (objImage.getStrCharactere() == strCharactere) {
                arrContainer.push(objImage);
              }
            });

            return arrContainer;
          }
          else {
            var retourne;

            this.children.forEach(objImage => {
              if (objImage.getStrCharactere() == strCharactere) {
                retourne = objImage;
              }
            });

            return retourne;
          }
        };
        object_Stage.getChildFromCharacterePositionAt = function(strCharactere, x, y) {
          var retourne;

          this.children.forEach(objImage => {
            if (objImage.getStrCharactere() == strCharactere && objImage.getX() == x && objImage.getY() == y) {
              retourne = objImage;
            }
          });

          return retourne;
        };
        object_Stage.getCharacterePositionAt = function(x, y) {
          var retourne;

          this.children.forEach(objImage => {
            if (objImage.getX() == x && objImage.getY() == y) {
              retourne = objImage.getStrCharactere();
            }
          });

          return retourne;
        };

        object_Stage.showHitBoxes = function(object, strColor) {
          /*objC2D.strokeStyle = 'white'; 
          objC2D.beginPath();
          objC2D.moveTo(objImage_1.getPixelX1(), objImage_1.getPixelY1());
          objC2D.lineTo(objImage_1.getPixelX2(), objImage_1.getPixelY1());
          objC2D.lineTo(objImage_1.getPixelX2(), objImage_1.getPixelY2());
          objC2D.lineTo(objImage_1.getPixelX1(), objImage_1.getPixelY2());
          objC2D.closePath();
          objC2D.stroke();

          objC2D.strokeStyle = 'yellow'; 
          objC2D.beginPath();
          objC2D.moveTo(objImage_2.getPixelX1(), objImage_2.getPixelY1());
          objC2D.lineTo(objImage_2.getPixelX2(), objImage_2.getPixelY1());
          objC2D.lineTo(objImage_2.getPixelX2(), objImage_2.getPixelY2());
          objC2D.lineTo(objImage_2.getPixelX1(), objImage_2.getPixelY2());
          objC2D.closePath();
          objC2D.stroke();*/

          objC2D.strokeStyle = strColor;
          objC2D.beginPath();
          objC2D.moveTo(object.getPixelX1(), object.getPixelY1());
          objC2D.lineTo(object.getPixelX2(), object.getPixelY1());
          objC2D.lineTo(object.getPixelX2(), object.getPixelY2());
          objC2D.lineTo(object.getPixelX1(), object.getPixelY2());
          objC2D.closePath();
          objC2D.stroke();
        };

        object_Stage.collision = function(objImage_1, objImage_2, ...args) {
          //this.showHitBoxes(objImage_1, "white");
          //this.showHitBoxes(objImage_2, "yellow");

          if (arguments.length == 2) {
            return ((objImage_1.getPixelY2() > objImage_2.getPixelY1()) && 
                  (objImage_1.getPixelY1() < objImage_2.getPixelY2()) &&
                  (objImage_1.getPixelX2() > objImage_2.getPixelX1()) &&
                  (objImage_1.getPixelX1() < objImage_2.getPixelX2()));
          }
          else {
            return ((objImage_1.getPixelY2()+arguments[2] > objImage_2.getPixelY1()) && 
                  (objImage_1.getPixelY1() < objImage_2.getPixelY2()) &&
                  (objImage_1.getPixelX2() > objImage_2.getPixelX1()) &&
                  (objImage_1.getPixelX1() < objImage_2.getPixelX2()));
          }
        };

        object_Stage.draw = function() {
          blackCanvas();

          this.children.forEach(objImage => {
            if (objImage.firstLoad) {
              var image = new Image();

              if (objImage.getStrCharactere() == "@") {
                image.onload = function() {
                  objC2D.drawImage(
                    image, 
                    objJoueur.getTab_Image_Runner(0),
                    objJoueur.getTab_Image_Runner(1),
                    40,
                    85,
                    objImage.getPixelX1(),
                    objImage.getPixelY1(),
                    40,
                    85
                  );
                }
              }
              else {
                image.onload = function() {
                  objC2D.drawImage(
                    image, 
                    objImage.getX()*(objCanvas.width/intNum_Cell_X), 
                    objImage.getY()*(objCanvas.height/intNum_Cell_Y), 
                    52, 
                    64
                  );
                }
              }

              image.src = objImage.getStrSrc();

              objImage.img = image;

              objImage.firstLoad = false;
            }
            else {
              /*if (objImage.visible) {
                objImage.img.src = objImage.getStrSrc();
              }
              else {              
                objImage.img.src = strSprite_Vide;
              }*/

              if (objImage.visible) {
                if (objImage.getStrCharactere() == "@") {
                  objC2D.drawImage(
                    objImage.img, 
                    objJoueur.getTab_Image_Runner(0),
                    objJoueur.getTab_Image_Runner(1),
                    40,
                    85,
                    objImage.getPixelX1(),
                    objImage.getPixelY1(),
                    50,
                    120
                  );
                }
                else {
                  objC2D.drawImage(
                    objImage.img, 
                    objImage.getX()*(objCanvas.width/intNum_Cell_X), 
                    objImage.getY()*(objCanvas.height/intNum_Cell_Y),
                    52, 
                    64
                  );
                }
              }
            }
          });

          var objDateFinale = new Date().getTime();

          var timeDiff = objDateFinale - objDateInitiale; 
          
          var secDiff = Math.floor((timeDiff % (1000 * 60)) / 1000); 
          var minDiff = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                 
          var str = "" + intScore;
          var pad = "0000000";

          var strScore = pad.substring(0, pad.length - str.length) + str;

          var text="SCORE: " + strScore + "\t\t\t\tTEMPS: " + ('0'+minDiff).slice(-2) + ":" + ('0'+secDiff).slice(-2) + "\t\t\t\tNIVEAU: " + intNiveau_Courant + "\t\t\t\tVIES: " + intVies;

          objC2D.fillStyle="white";
          objC2D.font = '35pt Verdana';
          objC2D.fillText(text, 40, 1070);
        };

        // !!! NE PAS UTILISER. LE CODE NE MARCHE PAS. UTILISER blackCanvas() AVEC objStage.draw() !!!
        /*object_Stage.clearDraw = function() {
          this.children.forEach(objImage => {
            //if (objImage.getStrCharactere() != "@")
            //objImage.img.src = strSprite_Vide;
          });
        };*/

        /*object_Stage.update = function(props) {
          if (!this.canvas) { 
            return; 
          }
          if (this.tickOnUpdate) { 
            this.tick(props); 
          }
          //if (this.dispatchEvent("drawstart", false, true) === false) { 
          //  console.log("Test 3");
          //  return; 
          //}
          //createjs.DisplayObject._snapToPixelEnabled = this.snapToPixelEnabled;
          var r = this.drawRect, ctx = this.canvas.getContext("2d");
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          if (this.autoClear) {
            if (r) { 
              ctx.clearRect(r.x, r.y, r.width, r.height); 
            }
            else { 
              ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); 
            }
          }
          ctx.save();
          if (this.drawRect) {
            ctx.beginPath();
            ctx.rect(r.x, r.y, r.width, r.height);
            ctx.clip();
          }
          //this.updateContext(ctx);
          this.draw(ctx, false);
          ctx.restore();
          //this.dispatchEvent("drawend");
        };*/

        return object_Stage;
      }

      /*
        var Image_Block = new Image();
        var Image_Brick = new Image();
        var Image_Empty = new Image();
        var Image_Gold = new Image();
        var Image_Ground = new Image();
        var tab_Image_Guard = new Array(22);
        var Image_Guard = new Image();
        var Image_Hladder = new Image();
        var Image_Hole = new Image();
        var tab_Image_Hole = new Array(18);
        var Image_Ladder = new Image();
        var Image_Over = new Image();
        var Image_Redhat = new Image();
        var tab_Image_Redhat = new Array(22);
        var Image_Rope = new Image();
        var Image_Runner = new Image();
        var tab_Image_Runner = new Array(18);
        var Image_Text = new Image();
        var tab_Image_Text=new Array(60);
        var Image_Trap = new Image();
        var intOptions=0;
        var intPositionX1=0;
        var intPositionY1=40;
        var binGauche=false;
      */

      // fonction stage qui initialise l'objet joueur et 
      // elle est redefinie par celui-ci a chaque fois qu'on appelle la fonction remettreVariable()
      function object_Joueur() {
        // objet qui est retourne par la fonction
        var object_Joueur = {};

        object_Joueur.imgSrc = null;
        
        object_Joueur.objImage = {};


        object_Joueur.intOptions = 0;

        object_Joueur.action = "@";

        /*object_Joueur.intPositionX1 = 0; //800;
        object_Joueur.intPositionY1 = 0; //900;

        object_Joueur.intPositionX2 = 40;
        object_Joueur.intPositionY2 = 44;*/

        //object_Joueur.binGauche = false;

        object_Joueur.tab_Image_Runner = null;
        object_Joueur.initTab_Images_Runner = function() {
          this.tab_Image_Runner = new Array(18);

          for (var i=0;i<9;i++){
            this.tab_Image_Runner[i] = new Array(2);
            this.tab_Image_Runner[i][0] = 40*i;
            this.tab_Image_Runner[i][1] = 0;
          }
          for (var i=9;i<18;i++){
            this.tab_Image_Runner[i] = new Array(2);
            this.tab_Image_Runner[i][0] = 40*(i-9);
            this.tab_Image_Runner[i][1] = 85;
          }
        };

        /*object_Joueur.initPosition = function() {
          this.intPositionX1 = this.objImage.getX()*(objCanvas.width/intNum_Cell_X);
          this.intPositionY1 = this.objImage.getY()*(objCanvas.height/intNum_Cell_Y);

          this.intPositionX2 = this.intPositionX1 + 40;
          this.intPositionY2 = this.intPositionY1 + 44;
        };*/

        /*object_Joueur.getintPositionX1 = function() {
          return this.intPositionX1;
        };
        object_Joueur.getintPositionY1 = function() {
          return this.intPositionY1;
        };*/

        object_Joueur.getTab_Image_Runner = function(x) {
          return this.tab_Image_Runner[this.intOptions][x];
        };

        /*object_Joueur.dessiner = function() {
          //objStage.removeAllImageCharactere("@");
          objC2D.drawImage(
            this.objImage.img, 
            this.tab_Image_Runner[this.intOptions][0],
            this.tab_Image_Runner[this.intOptions][1],
            40,
            85,
            this.intPositionX1,
            this.intPositionY1,
            40,
            85
          );
          
          objStage.setVisibleCharactere("@", true);
        };*/

        /*
          objImage.pixelX1 = x*(objCanvas.width/intNum_Cell_X);
          objImage.pixelY1 = y*(objCanvas.height/intNum_Cell_Y);
        */

        object_Joueur.moveRight = function() {
          if (this.objImage.getPixelX2() < objCanvas.width &&
              (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) != "#" ||
                (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) == "#" &&
                !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX()+1, this.objImage.getY()))))) {
            this.intOptions++;
            this.binGauche = false;

            objStage.getChildCharactereAt("-").forEach(objImageCorde => {
              if (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) == "-" &&
                  objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("-", this.objImage.getX()+1, this.objImage.getY()))) {
                this.intOptions = this.intOptions % 12;

                if (this.intOptions < 9){
                  this.intOptions =+ 9;
                }

                this.action = "-";
              }
              else {
                this.intOptions = this.intOptions % 3;

                this.action = "@";
              }

              return;
            });
            
            this.objImage.pixelX1 += 5;

            this.objImage.pixelX2 = this.objImage.getPixelX1() + intPixelWidthRunner;

            this.objImage.intX = Math.floor(this.objImage.getPixelX1()*intNum_Cell_X/objCanvas.width);
          }
        };
        object_Joueur.moveLeft = function() {
          if (this.objImage.getPixelX1() >= 0 &&
              (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) != "#" ||
                (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) == "#" &&
                !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX()-1, this.objImage.getY()))))) {
            this.intOptions++;
            this.binGauche = true;
            
            objStage.getChildCharactereAt("-").forEach(objImageCorde => {
              if (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) == "-" &&
                  objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("-", this.objImage.getX()-1, this.objImage.getY()))) {
                  this.intOptions = this.intOptions % 15;

                if (this.intOptions < 12){
                  this.intOptions =+ 12;
                }

                this.action = "-";
              }
              else {
                this.intOptions = this.intOptions % 6;

                if (this.intOptions < 3) {
                  this.intOptions =+ 3;
                }

                this.action = "@";
              }

              return;
            });
            
            this.objImage.pixelX1 -= 5;

            this.objImage.pixelX2 = this.objImage.getPixelX1() + intPixelWidthRunner;

            this.objImage.intX = Math.ceil(this.objImage.getPixelX1()*intNum_Cell_X/objCanvas.width);
          }
        };

        object_Joueur.moveUp = function() {
          objStage.getChildCharactereAt("H").forEach(objImage => {
            if (this.objImage.getPixelY1() >= 0 && 
                objStage.collision(this.objImage, objImage) &&
                objMap[this.objImage.getX()][this.objImage.getY()].strCharactere == "H") {
              this.intOptions++;
              this.intOptions = this.intOptions % 8;
              
              if (this.intOptions < 6) {
                this.intOptions =+ 6;
              }

              this.objImage.pixelY1 -= 5;

              this.objImage.pixelY2 = this.objImage.getPixelY1() + intPixelHeightRunner;

              this.objImage.intY = Math.ceil(this.objImage.getPixelY1()*intNum_Cell_Y/objCanvas.height);

              this.action = "H";

              return;
            }
            /*else {
              this.action = null;
            }*/
          });

          objStage.getChildCharactereAt("|").forEach(objImage => {
            if (this.objImage.getPixelY1() >= 0 && 
                objStage.collision(this.objImage, objImage) &&
                objMap[this.objImage.getX()][this.objImage.getY()].strCharactere == "|") {
              this.intOptions++;
              this.intOptions = this.intOptions % 8;
              
              if (this.intOptions < 6) {
                this.intOptions =+ 6;
              }

              this.objImage.pixelY1 -= 5;

              this.objImage.pixelY2 = this.objImage.getPixelY1() + intPixelHeightRunner;

              this.objImage.intY = Math.ceil(this.objImage.getPixelY1()*intNum_Cell_Y/objCanvas.height);

              this.action = "|";

              return;
            }
            /*else {
              this.action = null;
            }*/
          });
        };
        object_Joueur.moveDown = function() {
          /*var blnSurLaCorde = false;

          objStage.getChildCharactereAt("-").forEach(objImageCorde => {
            if (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) == "-" &&
                  objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("-", this.objImage.getX()+1, this.objImage.getY()))) {
              blnSurLaCorde = true;

              return;
            }

            if (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) == "-" &&
                objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("-", this.objImage.getX()-1, this.objImage.getY()))) {
              blnSurLaCorde = true;

              return;
            }
          });

          if (blnSurLaCorde) {
            this.action = "@";

            this.fall();
          }
          else {*/
            objStage.getChildCharactereAt("H").forEach(objImage => {
              if (this.objImage.getPixelY2() < objCanvas.height && 
                  objStage.collision(this.objImage, objImage, 5) && 
                  objMap[this.objImage.getX()][this.objImage.getY()].strCharactere == "H" &&
                    ((objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) != "#" && objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) != " ") ||
                    (objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) == "#" && !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX(), this.objImage.getY()+1))))) {
                  this.intOptions++;
                  this.intOptions = this.intOptions % 8;
                  
                  if (this.intOptions < 6) {
                    this.intOptions =+ 6;
                  }

                  this.objImage.pixelY1 += 5;

                  this.objImage.pixelY2 = this.objImage.getPixelY1() + intPixelHeightRunner;

                  this.objImage.intY = Math.floor(this.objImage.getPixelY1()*intNum_Cell_Y/objCanvas.height);

                  this.action = "H";

                  return;
                }
                /*else {
                  this.action = null;
                }*/
            });

            objStage.getChildCharactereAt("|").forEach(objImage => {
              if (this.objImage.getPixelY2() < objCanvas.height && 
                  objStage.collision(this.objImage, objImage, 2) && 
                  objMap[this.objImage.getX()][this.objImage.getY()].strCharactere == "|" &&
                    ((objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) != "#" && objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) != " ") ||
                    (objStage.getCharacterePositionAt(this.objImage.getX(), this.objImage.getY()+1) == "#" && !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX(), this.objImage.getY()+1))))) {
                this.intOptions++;
                this.intOptions = this.intOptions % 8;
                
                if (this.intOptions < 6) {
                  this.intOptions =+ 6;
                }

                this.objImage.pixelY1 += 5;

                this.objImage.pixelY2 = this.objImage.getPixelY1() + intPixelHeightRunner;

                this.objImage.intY = Math.floor(this.objImage.getPixelY1()*intNum_Cell_Y/objCanvas.height);

                this.action = "|";

                return;
              }
              /*else {
                this.action = null;
              }*/
            });
          //}
        };

        object_Joueur.fall = function() {
          /*console.log((this.action == "@") + "\n" + 
                      (objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == " ") + "\n" + 
                      ((objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == "#" && 
                        !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX(), this.objImage.getY()+1)))) + "\n" +
                      ((objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == "~" && 
                        !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("~", this.objImage.getX(), this.objImage.getY()+1)))));*/

            /*console.log(//(objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == "#" && 
                        !(objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("#", this.objImage.getX(), this.objImage.getY()+1), 20)));*/

          objBrickCollision.children.forEach(objBrick => {
            console.log(objStage.collision(this.objImage, objBrick));

            if (this.action == "@" && 
                ((objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == " ") ||
                    (objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == "#" && 
                    !objStage.collision(this.objImage, objBrick /*objStage.getChildFromCharacterePositionAt("#", this.objImage.getX(), this.objImage.getY()+1)*/)) /*|| 

                    (objMap[this.objImage.getX()][this.objImage.getY()+1].strCharactere == "~" && 
                    !objStage.collision(this.objImage, objStage.getChildFromCharacterePositionAt("~", this.objImage.getX(), this.objImage.getY()+1), 2))*/)) {
              this.intOptions++;

              if (this.binGauche) {
                this.intOptions = 17;
              }
              else {
                this.intOptions = 8;
              }

              this.objImage.pixelY1 += 5;

              this.objImage.pixelY2 = this.objImage.getPixelY1() + intPixelHeightRunner;

              this.objImage.intY = Math.floor(this.objImage.getPixelY1()*intNum_Cell_Y/objCanvas.height);
            }
          });
        };

        object_Joueur.removeBrick = function() {
          if (this.binGauche) {
            this.intOptions=16;
            //console.log(objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()+1) + ", " + this.objImage.getX() + "x, " + this.objImage.getY() + "y");

            if (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()+1) == "#" &&
                (objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) == " " || typeof objStage.getCharacterePositionAt(this.objImage.getX()-1, this.objImage.getY()) == "undefined")) {
              objStage.getChildFromCharacterePositionAt("#", this.objImage.getX()-1, this.objImage.getY()+1).visible = false;
            }
          }
          else{
            this.intOptions=15;
            //console.log(objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()+1) + ", " + this.objImage.getX() + "x, " + this.objImage.getY() + "y");

            if (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()+1) == "#" &&
                (objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) == " " || typeof objStage.getCharacterePositionAt(this.objImage.getX()+1, this.objImage.getY()) == "undefined")) {
              objStage.getChildFromCharacterePositionAt("#", this.objImage.getX()+1, this.objImage.getY()+1).visible = false;

            }
          }
        };
        object_Joueur.removeRight = function() {
          console.log("Remove right");
          this.intOptions=15;
        };
        object_Joueur.removeLeft = function() {
          console.log("Remove left");
          this.intOptions=16;
        };

        return object_Joueur;
      }

      function object_Images() {
        var object_Images = {};

        object_Images.strCharactere = null;
        object_Images.intX = null;
        object_Images.intY = null;
        object_Images.strSrc = null;
        object_Images.img = null;

        object_Images.firstLoad = null;
        object_Images.visible = null;

        object_Images.pixelX1 = null;
        object_Images.pixelY1 = null;
        object_Images.pixelX2 = null;
        object_Images.pixelY2 = null;

        object_Images.getPixelX1 = function() {
          return this.pixelX1;
        };
        object_Images.getPixelY1 = function() {
          return this.pixelY1;
        };
        object_Images.getPixelX2 = function() {
          return this.pixelX2;
        };
        object_Images.getPixelY2 = function() {
          return this.pixelY2;
        };

        /*object_Images.setPixelX1 = function(x1) {
          this.pixelX1 = x1;
        };
        object_Images.setPixelY1 = function(y1) {
          this.pixelY1 = y1;
        };
        object_Images.setPixelX2 = function(x2) {
          this.pixelX2 = this.pixelX1 + x2;
        };
        object_Images.setPixelY2 = function(y2) {
          this.pixelY2 = this.pixelY1 + y2;
        };*/

        object_Images.getImg = function() {
          return this.img;
        };

        object_Images.toString = function() {
          return "[\n" + 
                  "\t" + "Image \n" + 
                  "\t" + "charactere:\t" + this.strCharactere + ",\n" + 
                  "\t" + "x:\t" + this.intX + ",\n" + 
                  "\t" + "y:\t" + this.intY + ",\n" + 
                  "\t" + "src:\t" + this.strSrc + ",\n" + 
                  "\t" + "X1:\t" + this.pixelX1 + ",\n" + 
                  "\t" + "Y1:\t" + this.pixelY1 + ",\n" + 
                  "\t" + "X2:\t" + this.pixelX2 + ",\n" + 
                  "\t" + "Y2:\t" + this.pixelY2 + ",\n" + 
                  "\n]\n";
        };

        object_Images.getStrCharactere = function() {
          return this.strCharactere;
        };
        object_Images.getX = function() {
          return this.intX;
        };
        object_Images.getY = function() {
          return this.intY;
        };
        object_Images.getStrSrc = function() {
          return this.strSrc;
        };
        object_Images.getImg = function() {
          return this.img;
        };

        object_Images.setX = function(x) {
          this.intX = x;
        };
        object_Images.setY = function(y) {
          this.intY = y;
        };

        object_Images.incrementX = function() {
          this.intX++;
        };
        object_Images.incrementY = function() {
          this.intY++;
        };

        object_Images.decrementX = function() {
          this.intX--;
        };
        object_Images.decrementY = function() {
          this.intY--;
        };

        return object_Images;
      }

      function object_BrickCollision() {
        var object_BrickCollision = {};

        object_BrickCollision.children = [];

        object_BrickCollision.addChild = function(child) {
          if (child == null) { return child; }
          var l = arguments.length;
          if (l > 1) {
            for (var i=0; i<l; i++) { this.addChild(arguments[i]); }
            return arguments[l-1];
          }
          // Note: a lot of duplication with addChildAt, but push is WAY faster than splice.
          var par=child.parent, silent = par === this;
          par&&par._removeChildAt(this.indexOf(par.children, child), silent);
          child.parent = this;
          this.children.push(child);
          //if (!silent) { child.dispatchEvent("added"); }
          return child;
        }

        return object_BrickCollision;
      }

      function object_brick() {
        var object_brick = {};

        object_brick.strCharactere = null;

        object_brick.pixelX1 = null;
        object_brick.pixelY1 = null;
        object_brick.pixelX2 = null;
        object_brick.pixelY2 = null;

        object_brick.getPixelX1 = function() {
          return this.pixelX1;
        };
        object_brick.getPixelY1 = function() {
          return this.pixelY1;
        };
        object_brick.getPixelX2 = function() {
          return this.pixelX2;
        };
        object_brick.getPixelY2 = function() {
          return this.pixelY2;
        };

        return object_brick;
      }

      function deplacerJoueur() {
        switch (event.keyCode) {
          case 39: // Flèche-à-droite
              // Déplacer à droite si le bâton n'entre pas en collision avec le mur droite
              /*
              intOptions=intOptions%12;
              if(intOptions<9){
                intOptions=+9;
              }
              */
              objJoueur.moveRight();
              
              break;
          case 37: // Flèche-à-gauche
              // Déplacer à gauche si le bâton n'entre pas en collision avec le mur gauche
              /*
              intOptions=intOptions%15;
              if(intOptions<12){
                intOptions=+12;
              }
              */
              objJoueur.moveLeft();

              break;
          case 38: // Flèche-en-haut
              objJoueur.moveUp();

              break;
          case 40: // Flèche-en-bas
            //objJoueur.fall();
            objJoueur.moveDown();

            break;
          case 32: // Espace
            objJoueur.removeBrick();

            break;
          case 88: // x
            objJoueur.removeRight();
            break;
          case 90: // z
            objJoueur.removeLeft();
            break;
        }
      }
    </script>
  </head>
  
  
  <body onload="initLodeRunner()"> 
    <canvas id="monCanvas" width="1440" height="1088" tabIndex="1" onkeydown="deplacerJoueur();";>
      Votre navigateur ne supporte pas la balise canvas
    </canvas>
  </body>
</html>